#!/usr/bin/env bash

[ -n "${TFENV_DEBUG}" ] && set -x
source ${TFENV_ROOT}/libexec/helpers

[ "${#}" -gt 1 ] && error_and_die "usage: tfenv install [<version>]"

declare version_requested version regex

if [ -z "${1}" ]; then
  version_file="$(tfenv-version-file)"
  if [ "${version_file}" != "${TFENV_ROOT}/version" ]; then
    version_requested="$(cat ${version_file} || true)"
  fi
else
  version_requested="${1}"
fi

if [[ "${version_requested}" =~ ^min-required$ ]]; then
  echo "Detecting minimal required version..."
  found_min_required="$(tfenv-min-required)"

  if [[ $? -eq 0 ]]; then
      echo "Min required version is detected as ${found_min_required}"
      version_requested=${found_min_required}
  else
    exit 1
  fi
fi

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}"
  regex="${version_requested##*\:}"
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}"
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$"
else
  version="${version_requested}"
  regex="^${version_requested}$"
fi

[ -n "${version}" ] || error_and_die "Version is not specified"
version="$(tfenv-list-remote | grep -e "${regex}" | head -n 1)"
[ -n "${version}" ] || error_and_die "No versions matching '${1}' found in remote"

dst_path="${TFENV_ROOT}/versions/${version}"
if [ -f "${dst_path}/terraform" ]; then
  echo "Terraform v${version} is already installed"
  exit 0
fi

TFENV_ARCH=${TFENV_ARCH:-amd64}
case "$(uname -s)" in
  Darwin*)
    os="darwin_${TFENV_ARCH}"
    ;;
  MINGW64*)
    os="windows_${TFENV_ARCH}"
    ;;
  MSYS_NT*)
    os="windows_${TFENV_ARCH}"
    ;;
  CYGWIN_NT*)
    os="windows_${TFENV_ARCH}"
    ;;
  *)
    os="linux_${TFENV_ARCH}"
    ;;
esac

keybase_bin="$(which keybase 2>/dev/null)"
shasum_bin="$(which shasum 2>/dev/null)"

version_url="https://releases.hashicorp.com/terraform/${version}"

# Thanks for the inconsistency in 0.12-alpha, Hashicorp(!)
if [[ "${version}" =~ 0.12.0-alpha[3-9] ]]; then
  tarball_name="terraform_${version}_terraform_${version}_${os}.zip";
else
  tarball_name="terraform_${version}_${os}.zip";
fi;

shasums_name="terraform_${version}_SHA256SUMS"

skip_verify=0

info "Installing Terraform v${version}"

# Create a local temporary directory for downloads
download_tmp="$(mktemp -d tfenv_download.XXXXXX)" || error_and_die "Unable to create temporary download directory in $(pwd)"
# Clean it up in case of error
trap "rm -rf ${download_tmp}" EXIT;

info "Downloading release tarball from ${version_url}/${tarball_name}"
curlw -# -f -o "${download_tmp}/${tarball_name}" "${version_url}/${tarball_name}" || error_and_die "Tarball download failed"
info "Downloading SHA hash file from ${version_url}/${shasums_name}"
curlw -s -f -o "${download_tmp}/${shasums_name}" "${version_url}/${shasums_name}" || error_and_die "SHA256 hashes download failed"
curlw -s -f -o "${download_tmp}/${shasums_name}.sig" "${version_url}/${shasums_name}.sig" || error_and_die "SHA256SUMS signature download failed"


# Verify signature if keybase is present.
if [[ -n "${keybase_bin}" && -x "${keybase_bin}" && $UID -ne 0 ]]; then
  "${keybase_bin}" status | grep -Eq '^Logged in:[[:space:]]*yes'
  keybase_logged_in=$?
  "${keybase_bin}" list-following | grep -Fq hashicorp
  keybase_following_hc=$?

  if [[ "${keybase_logged_in}" -ne 0 || "${keybase_following_hc}" -ne 0 ]]; then
    warn_and_continue "Unable to verify GPG signature unless logged into keybase and following hashicorp"
  else
    info "Downloading SHA hash signature file from ${version_url}/${shasums_name}.sig"
    "${keybase_bin}" pgp verify -S hashicorp -d "${download_tmp}/${shasums_name}.sig" -i "${download_tmp}/${shasums_name}" || error_and_die "SHA256SUMS signature does not match!"
  fi
elif [[ $(gpg --version |grep -c RSA ) -gt 1 || $skip_verify -eq 1 ]] ; then
  info "attempting to verify using GPG"
  if [[ $UID -eq 0 ]]; then
    warn_and_continue "Running as root! keybase would have failed, reconsider using a non-elevated user"
  fi

  # fairly obtuse use of GPG, 12th column is capabilites of the key, capitals are primary key, S is signature
  if [[ $(gpg --with-colons -k 'security@hashicorp.com' |awk -F: '{print $12}') =~ 'S' ]]; then
    blind_trust_keyring=""
  else
    notice_and_continue "Could not detect hashicorp's public key, continuing; this will not modify the trust store"
    blind_trust_keyring="--no-default-keyring --keyring /tmp/tfenv_keyring.gpg"

    gpg ${blind_trust_keyring} --batch --import <(curl -s https://keybase.io/hashicorp/pgp_keys.asc)
    if [[ $? -ne 0 ]]; then
      gpg ${blind_trust_keyring} --keyserver hkps://hkps.pool.sks-keyservers.net:443 \
      --recv-keys $(gpg --batch --list-packets "${version_url}/${shasums_name}.sig" | egrep -o ' [1-9A-F]{16}$')
    fi
    notice_and_continue "Consider importing the key security@hashicorp.com and trusting it"
  fi
  # GPG trusts can be complex, it would be nice to handle the relationship better, for now output to console
  gpg ${blind_trust_keyring} --batch --verify "${download_tmp}/${shasums_name}.sig" \
   "${download_tmp}/${shasums_name}" 
  if [[ $? -ne 0 ]]; then
    info "Signature has been verified against a signature from Hashicorp"
  fi
  rm /tmp/tfenv_keyring.gpg
else
  # Warning about this avoids an unwarranted sense of confidence in the SHA check
  warn_and_continue "No keybase install found, skipping GPG signature verification"
fi

if [[ -n "${shasum_bin}" && -x "${shasum_bin}" ]]; then
  (
    cd "${download_tmp}"
    "${shasum_bin}" -a 256 -s -c <(grep -F "${tarball_name}" "${shasums_name}") || error_and_die "SHA256 hash does not match!"
  )
else
  # Lack of shasum deserves a proper warning
  warn_and_continue "No shasum tool available. Skipping SHA256 hash validation"
fi

mkdir -p "${dst_path}" || error_and_die "Failed to make directory ${dst_path}"
unzip "${download_tmp}/${tarball_name}" -d "${dst_path}" || error_and_die "Tarball unzip failed"

info "Installation of terraform v${version} successful"
tfenv-use "$version"
