#!/usr/bin/env bash
# Set or show the local directory Terraform version
#
# Usage: tfenv local <version>
#        tfenv local --unset

[ -n "${TFENV_DEBUG}" ] && set -x
source "${TFENV_ROOT}/libexec/helpers"

[ "${#}" -ne 1 ] && error_and_die "usage: tfenv local <version>"

declare version_requested version regex

version_requested="$1"

if [ "$version_requested" = "--unset" ]; then
  rm -f .terraform-version

  if [ ! -f .terraform-version ]; then
    info ".terraform-version was deleted"
  else
    error_and_die ".terraform-version is not deleted"
  fi
elif [ -n "$version_requested" ]; then
  if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
    version="${version_requested%%\:*}"
    regex="${version_requested##*\:}"
  elif [[ "${version_requested}" =~ ^latest$ ]]; then
    version="${version_requested}"
    regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$"
  else
    version="${version_requested}"
    regex="^${version_requested}$"
  fi

  [ -d "${TFENV_ROOT}/versions" ] \
    || error_and_die "No versions of terraform installed. Please install one with: tfenv install"

  version="$(\ls "${TFENV_ROOT}/versions" \
    | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
    | grep -e "${regex}" \
    | head -n 1
  )"

  [ -n "${version}" ] || error_and_die "No installed versions of terraform matched '${1}'"

  target_path="${TFENV_ROOT}/versions/${version}"
  [ -f "${target_path}/terraform" ] \
    || error_and_die "Version directory for ${version} is present, but the terraform binary is not! Manual intervention required."
  [ -x "${target_path}/terraform" ] \
    || error_and_die "Version directory for ${version} is present, but the terraform binary is not executable! Manual intervention required. "

  echo "$version_requested" > .terraform-version
  info ".terraform-version was created"
fi
